1. changed opengl version to 4.3
2. added a global variable "camPos" in GLCommon.h (line 9) / GLCommon.cpp (line 6) to store the camera position.
   It would be convenient to have a global struct to store all the "Model independent" variables which are needed in shaders, 
   such as camera position, proj and view matrices etc.. (but also a little dangerous...)
3. added some code in function CreateShaderFromFile(...) (GLCommon.cpp, line 71) to output the shader compile error information if there is any.
4. added printMat4(glm::mat4 m, std::string matName) and printVec3(...) in GLcommon.h (line 11) for debug use
5. added classes VCModel <-- VCWVObjModel <-- VCText2D (replace class CMeshComponent)
                                          <-- VCCh3D (3D character)
                                          <-- VCPSModel (for models generated by photoscan)
                 VCModel <-- Sky
   ("<--" means "inherited from")
   
   Basic transformations (translation, rotation, scale) are handled in class VCModel. rotation is stored in quaternion.
   rotation and scale are always performed in model space (i.e. rotate/scale around the center of the model).
   e.g. if you want to rotate an obj around axis Y of the World space, transform axis Y into model space first.
   call modelMat() and normalMat() to get the modelToWorld matrix and normalToWorld Matrix 
   call initShaderProg() to recompile shaders and shader programs
   
   VCWVObjModel: can specify one Texture for all groups (like quad.obj which uses hello.png), or
                 use path to .obj file, material name and texture image file extension to get the path to texture image files 
                 (like .obj and .mtl files generated by Photoscan.), or
                 derived classes could implement the virtual setupTexForMtls() function and call it in constructor.
                 I don't think we will go that far for this project.
                 
                 if there is no data for normals in .obj file, it will generate normals for every vertex (smooth shading) automatically.
                 
                 For all classes derived from class VCWVObjModel:
                 uniform names "diffuse", "specular", "shininess", "emmissive", "ambient" in shader
                 are used exclusively for data read from .mtl file if corresponding options are turned on (see definition for more details). 
                 
    ############# VC stands for visual computing, WV stands for Wavefront, PS stands for Photoscan ###############
    
6. I reimplemented alignToCamera(...) function in class VCText2D with quaternion    
7. put all the shaders in sub folder ./shaders 
8. Corresponding object definitions in main.cpp:
   VCText2D *hello, VCCh3D *chH, VCCh3D *sphereModel, VCPSModel *headModel, VCPSModel *stickModel,VCPSModel *dollModel, Sky *sky;

9.  // #define HEAD_MODEL
    // #define STICK_MODEL
    // #define DOLL_MODEL
    uncomment these lines in main.cpp to draw those models

10. The files should already be in the repository (gui_test branch)
-- .obj files, .mtl files and texture image files for doll <http://www.agisoft.com/datasets/doll.zip>, 
   for head and stick (the bone) <https://cgcloud.ivd.kit.edu/public.php?service=files&t=97b3381179a712b77c0148c34d21f54f&path=%2Fmeshes>
   the should be put in sub folder ./assets
-- file "head_full_texaavg.mtl" should be renamed to "head_full_tex.mtl", 
   and all the material name and texture image file name in it should be changed to "head_full_tex*", 
   The current version is not consistent with "head_full_tex.obj".
   (REMOVE "aavg" EVERYWHERE)